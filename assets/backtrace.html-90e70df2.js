import{_ as p,r as e,o,c,a as n,b as a,d as t,e as l}from"./app-097a6a1b.js";const i={},u=l(`<h1 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法" aria-hidden="true">#</a> 回溯法</h1><p>平时工作中感觉回溯法相关的思想倒是用的不多，但是在leetcode中，其实回溯相关的还是用的挺多的，尤其是那种要获取所有分类的题目，基本都是采用回溯法去解决的。 回溯其实很多时候会依赖于深度优先搜索，并且需要自己在代码中处理各种分支情况.</p><p>最典型的就是八皇后问题</p><h2 id="相关伪代码" tabindex="-1"><a class="header-anchor" href="#相关伪代码" aria-hidden="true">#</a> 相关伪代码</h2><p>一般流程的伪代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>procedure backtrack(P, c) is
    if reject(P, c) then return
    if accept(P, c) then output(P, c)
    s ← first(P, c)
    while s ≠ NULL do
        backtrack(P, s)
        s ← next(P, s)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时空复杂度" tabindex="-1"><a class="header-anchor" href="#时空复杂度" aria-hidden="true">#</a> 时空复杂度</h2><p>最坏情况下，回溯法的时间复杂度为指数级</p><h2 id="常见的一些面试题" tabindex="-1"><a class="header-anchor" href="#常见的一些面试题" aria-hidden="true">#</a> 常见的一些面试题</h2><h3 id="括号生成" tabindex="-1"><a class="header-anchor" href="#括号生成" aria-hidden="true">#</a> 括号生成</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//https://leetcode.cn/problems/generate-parentheses/description/%3Ffavorite=2cktkvj</span>
<span class="token keyword">func</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s <span class="token builtin">string</span>
	ans <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> backtrace <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	backtrace <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> open <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">close</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">{</span>
			ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> open <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
			s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span>
			<span class="token function">backtrace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> open<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">close</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
			s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> open <span class="token operator">&gt;</span> <span class="token builtin">close</span> <span class="token punctuation">{</span>
			s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span>
			<span class="token function">backtrace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> open<span class="token punctuation">,</span> <span class="token builtin">close</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">backtrace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ans
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八皇后问题" tabindex="-1"><a class="header-anchor" href="#八皇后问题" aria-hidden="true">#</a> 八皇后问题</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// https://leetcode.cn/problems/eight-queens-lcci/description/</span>
<span class="token comment">// \`\`\`</span>
<span class="token comment">// 设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</span>

<span class="token comment">// 注意：本题相对原题做了扩展</span>

<span class="token comment">// 示例:</span>

<span class="token comment">//  输入：4</span>
<span class="token comment">//  输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span>
<span class="token comment">//  解释: 4 皇后问题存在如下两个不同的解法。</span>
<span class="token comment">// [</span>
<span class="token comment">//  [&quot;.Q..&quot;,  // 解法 1</span>
<span class="token comment">//   &quot;...Q&quot;,</span>
<span class="token comment">//   &quot;Q...&quot;,</span>
<span class="token comment">//   &quot;..Q.&quot;],</span>

<span class="token comment">//	[&quot;..Q.&quot;,  // 解法 2</span>
<span class="token comment">//	 &quot;Q...&quot;,</span>
<span class="token comment">//	 &quot;...Q&quot;,</span>
<span class="token comment">//	 &quot;.Q..&quot;]</span>
<span class="token comment">//</span>
<span class="token comment">// ]</span>
<span class="token comment">// \`\`\`</span>
<span class="token keyword">func</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">//棋盘的初始化</span>
	board <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		row <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			row<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span>
		<span class="token punctuation">}</span>
		board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> row
	<span class="token punctuation">}</span>

	<span class="token comment">//我们有几个内容需要全局记录,1、每一列是否被使用过；2、主对角线；3、副对角线</span>
	<span class="token comment">//这里用了一种比较取巧的方式去判断这个对角线是否有数据，</span>
	<span class="token comment">//同一个对角线上 i+j 的值是相等的</span>
	colUsed <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	dig1Used <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span>
	dig2Used <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span>
	<span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> colUsed<span class="token punctuation">,</span> dig1Used<span class="token punctuation">,</span> dig2Used<span class="token punctuation">,</span> board<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ans<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ans
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>row <span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">,</span> colUsed <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> dig1Used <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> dig2Used <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> ans <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> row <span class="token operator">==</span> n <span class="token punctuation">{</span>
		<span class="token comment">//最终的结果</span>
		<span class="token keyword">var</span> solution <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> board <span class="token punctuation">{</span>
			solution <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>solution<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">,</span> solution<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//判断是否可以放下</span>
	<span class="token keyword">for</span> col <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>colUsed<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dig1Used<span class="token punctuation">[</span>row<span class="token operator">+</span>col<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dig2Used<span class="token punctuation">[</span>row<span class="token operator">-</span>col<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
			board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;Q&#39;</span>
			colUsed<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			dig1Used<span class="token punctuation">[</span>row<span class="token operator">+</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			dig2Used<span class="token punctuation">[</span>row<span class="token operator">-</span>col<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token function">backtrace</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> colUsed<span class="token punctuation">,</span> dig1Used<span class="token punctuation">,</span> dig2Used<span class="token punctuation">,</span> board<span class="token punctuation">,</span> ans<span class="token punctuation">)</span>
			<span class="token comment">//复原</span>
			board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span>
			colUsed<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
			dig1Used<span class="token punctuation">[</span>row<span class="token operator">+</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
			dig2Used<span class="token punctuation">[</span>row<span class="token operator">-</span>col<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,14),r={href:"https://en.wikipedia.org/wiki/Backtracking",target:"_blank",rel:"noopener noreferrer"},k={href:"https://leetcode.cn/problems/combination-sum/solutions/406516/zu-he-zong-he-by-leetcode-solution/",target:"_blank",rel:"noopener noreferrer"};function d(v,b){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ol",null,[n("li",null,[n("a",r,[a("https://en.wikipedia.org/wiki/Backtracking"),t(s)])]),n("li",null,[n("a",k,[a("https://leetcode.cn/problems/combination-sum/solutions/406516/zu-he-zong-he-by-leetcode-solution/"),t(s)])])])])}const h=p(i,[["render",d],["__file","backtrace.html.vue"]]);export{h as default};
