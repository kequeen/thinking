import{_ as r,r as c,o as t,c as n,a as e,b as o,d as h,e as d}from"./app-47e324c0.js";const s={},i=d('<h1 id="brpc" tabindex="-1"><a class="header-anchor" href="#brpc" aria-hidden="true">#</a> brpc</h1><p>其实rpc服务的基本流程 1、如何高效序列化+反序列化要传输的数据 2、如何找到下游的服务 通过BNS或者其他定位服务 3、做负载均衡的策略 4、如何自动重试 5、连接的建立，我们是使用短连接、长连接还是连接池</p><h2 id="关于流式rpc" tabindex="-1"><a class="header-anchor" href="#关于流式rpc" aria-hidden="true">#</a> 关于流式RPC</h2><h2 id="性能基准" tabindex="-1"><a class="header-anchor" href="#性能基准" aria-hidden="true">#</a> 性能基准</h2><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>',5),l={href:"https://brpc.apache.org/zh/docs/",target:"_blank",rel:"noopener noreferrer"};function p(_,b){const a=c("ExternalLinkIcon");return t(),n("div",null,[i,e("ol",null,[e("li",null,[e("a",l,[o("https://brpc.apache.org/zh/docs/"),h(a)])])])])}const u=r(s,[["render",p],["__file","brpc.html.vue"]]);export{u as default};
