import{_ as i,r as h,o as t,c as d,a as e,b as r,d as n,e as o}from"./app-097a6a1b.js";const l={},s=o('<h1 id="调度器" tabindex="-1"><a class="header-anchor" href="#调度器" aria-hidden="true">#</a> 调度器</h1><p>线程是操作系统调度时的基本单元，而linux并不区分线程和进程的调度</p><h2 id="设计原理" tabindex="-1"><a class="header-anchor" href="#设计原理" aria-hidden="true">#</a> 设计原理</h2><p>GMP调度器（线程M，Goroutine G 和处理器P） 历史上其实本身是G-M模型</p><h3 id="历史变迁" tabindex="-1"><a class="header-anchor" href="#历史变迁" aria-hidden="true">#</a> 历史变迁</h3><h4 id="单线程调度器" tabindex="-1"><a class="header-anchor" href="#单线程调度器" aria-hidden="true">#</a> 单线程调度器</h4><p>简单评价就是一个能用的调度器，G-M模型。全局只有一个线程</p><h4 id="多线程调度器" tabindex="-1"><a class="header-anchor" href="#多线程调度器" aria-hidden="true">#</a> 多线程调度器</h4><p>GOMAXPROCS 可以控制程序中的最大处理器数，即活跃线程数</p><ol><li>调度器和锁是全局资源，所有的调度状态都是中心化存储的，锁竞争问题严重</li><li>线程需要经常互相传递可运行的Goroutine，引入了大量的延迟</li><li>每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性</li><li>系统调用频繁阻塞和解除阻塞正在运行的线程，增加了额外开销</li></ol><h4 id="任务窃取调度器" tabindex="-1"><a class="header-anchor" href="#任务窃取调度器" aria-hidden="true">#</a> 任务窃取调度器</h4>',11),c={href:"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit",target:"_blank",rel:"noopener noreferrer"},u=o('<ol><li>当前的G-M模型中引入了处理器P，增加中间层</li><li>在处理器P的基础上实现了基于工作窃取的调度器</li></ol><h4 id="抢占式调度器" tabindex="-1"><a class="header-anchor" href="#抢占式调度器" aria-hidden="true">#</a> 抢占式调度器</h4><h2 id="一些疑问" tabindex="-1"><a class="header-anchor" href="#一些疑问" aria-hidden="true">#</a> 一些疑问</h2><ol><li>go的调度器，其实跟linux系统里面的线程调度的本质区别是什么，是否也是抢占式调度 采用抢占式调度如何避免饿死的问题</li><li>调度相关的问题，其实在java的场景中应该也会遇到，有时间可以查下java里面的调度是什么样子的</li></ol><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>',5),_={href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://zh.m.wikipedia.org/zh-hans/%E8%B0%83%E5%BA%A6_(%E8%AE%A1%E7%AE%97%E6%9C%BA)",target:"_blank",rel:"noopener noreferrer"};function f(g,x){const a=h("ExternalLinkIcon");return t(),d("div",null,[s,e("p",null,[e("a",c,[r("改进手段"),n(a)])]),u,e("ol",null,[e("li",null,[e("a",_,[r("https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/"),n(a)])]),e("li",null,[e("a",p,[r("https://zh.m.wikipedia.org/zh-hans/调度_(计算机)"),n(a)])])])])}const b=i(l,[["render",f],["__file","scheduler.html.vue"]]);export{b as default};
