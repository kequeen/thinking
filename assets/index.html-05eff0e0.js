import{_ as r,r as a,o as s,c as l,a as e,b as t,d as n}from"./app-47e324c0.js";const i={},d=e("h1",{id:"前端",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前端","aria-hidden":"true"},"#"),t(" 前端")],-1),c=e("p",null,"不要给自己设限，或者是说工程师的核心目标是如何推动事情落地，推动做事工程化、流程化",-1),_=e("blockquote",null,[e("p",null,"Don't repeat yourself")],-1),h=e("h2",{id:"前端框架",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前端框架","aria-hidden":"true"},"#"),t(" 前端框架")],-1),u=e("p",null,"关于前端框架的分类，我觉得主要可以分为以下几类：",-1),p=e("li",null,"JS框架，就是常见的Vue、React这种",-1),f=e("li",null,"UI框架，类似于bootstrap,ant design这种前端的页面框架",-1),m={href:"https://v3.umijs.org/zh-CN/docs",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"关于前端技术的演进",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#关于前端技术的演进","aria-hidden":"true"},"#"),t(" 关于前端技术的演进")],-1),b=e("p",null,"我所了解的前端技术的演进，从一开始的html + css + js，第二个阶段是进化到了 jQuery + bootstrap 这个阶段，而后就是vue，react，angular等前端js框架大行其道的时候，再往前进化又会是什么呢？ 其实进化的方向都是如何减少人力的重复劳动，以及更好的抽象去降低复杂度。 更往前一步，我理解应该是更针对业务层面的抽象了，各种常用的业务功能都会被抽象出来，比如aisuda这种。",-1),g=e("h2",{id:"参考文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),t(" 参考文档")],-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction",target:"_blank",rel:"noopener noreferrer"};function v(C,N){const o=a("ExternalLinkIcon");return s(),l("div",null,[d,c,_,h,u,e("ol",null,[p,f,e("li",null,[t("类似于"),e("a",m,[t("umi"),n(o)]),t("这种，管理整个前端项目的生命周期的框架")])]),x,b,g,e("ol",null,[e("li",null,[e("a",k,[t("https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction"),n(o)])])])])}const I=r(i,[["render",v],["__file","index.html.vue"]]);export{I as default};
