import{_ as t,r as p,o,c as e,a as n,b as c,d as l,e as s}from"./app-097a6a1b.js";const i={},u=s('<h1 id="矩阵" tabindex="-1"><a class="header-anchor" href="#矩阵" aria-hidden="true">#</a> 矩阵</h1><p>关于矩阵的题目，也是leetcode上的高频题目之一。我觉得对于我而言，考察点主要有两个：</p><ol><li>用二维数组对矩阵的抽象</li><li>对于各种边界问题的考虑</li></ol><h2 id="常见题目" tabindex="-1"><a class="header-anchor" href="#常见题目" aria-hidden="true">#</a> 常见题目</h2><p>其实我觉得矩阵相关的题目，大体的思路大家都是容易想明白的，但这种边界的条件，还是需要不断的练习去加强。基本上其实都会有上下左右四个方向，我们怎么去构造这个调整的公式。</p><h3 id="螺旋打印矩阵" tabindex="-1"><a class="header-anchor" href="#螺旋打印矩阵" aria-hidden="true">#</a> 螺旋打印矩阵</h3>',6),r={href:"https://leetcode.cn/problems/spiral-matrix/solutions/",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//打印矩阵</span>
<span class="token comment">//我觉得按照层去打印会更容易理解一些</span>
<span class="token keyword">func</span> <span class="token function">spiralOrderV2</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		row<span class="token punctuation">,</span> column              <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		order                    <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> row<span class="token operator">*</span>column<span class="token punctuation">)</span>
		left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span>
		index                    <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">for</span> left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom <span class="token punctuation">{</span>
		<span class="token comment">//从左到右</span>
		<span class="token keyword">for</span> column <span class="token operator">=</span> left<span class="token punctuation">;</span> column <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> column<span class="token operator">++</span> <span class="token punctuation">{</span>
			order<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span>
			index<span class="token operator">++</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//从上到下</span>
		<span class="token keyword">for</span> row <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> row<span class="token operator">++</span> <span class="token punctuation">{</span>
			order<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span>
			index<span class="token operator">++</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//判断是否还需要遍历</span>
		<span class="token keyword">if</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> bottom <span class="token punctuation">{</span>
			<span class="token comment">//向左遍历</span>
			<span class="token keyword">for</span> column <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> column <span class="token operator">&gt;</span> left<span class="token punctuation">;</span> column<span class="token operator">--</span> <span class="token punctuation">{</span>
				order<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span>
				index<span class="token operator">++</span>
			<span class="token punctuation">}</span>
			<span class="token comment">//向上遍历</span>
			<span class="token keyword">for</span> row <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&gt;</span> top<span class="token punctuation">;</span> row<span class="token operator">--</span> <span class="token punctuation">{</span>
				order<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span>
				index<span class="token operator">++</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//最终调整上下左右</span>
		left<span class="token operator">++</span>
		right<span class="token operator">--</span>
		top<span class="token operator">++</span>
		bottom<span class="token operator">--</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> order
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const a=p("ExternalLinkIcon");return o(),e("div",null,[u,n("p",null,[n("a",r,[c("原题链接"),l(a)])]),k])}const h=t(i,[["render",d],["__file","matrix.html.vue"]]);export{h as default};
