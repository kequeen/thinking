import{_ as e,r as o,o as c,c as i,a as n,b as s,d as p,e as a}from"./app-097a6a1b.js";const l={},u=a('<h1 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h1><p>滑动窗口是一种常用的算法技巧，用于解决一类涉及连续子数组或子字符串的问题。滑动窗口通常适用于以下情况：</p><ol><li><p>字符串或数组中的连续子串/子数组问题：当需要处理连续的子串或子数组，并且需要在该子串/子数组上进行操作（如求和、求平均值、查找最大/最小值等）时，滑动窗口是一种常见的解决方法。比如求解最长连续不重复子串、找到满足特定条件的最小/最大子数组等问题。</p></li><li><p>固定窗口大小问题：当需要在固定大小的窗口上进行操作，并且需要在窗口滑动过程中维护某种状态或性质时，滑动窗口也是一个有效的技巧。这种情况下，窗口通常由两个指针（左指针和右指针）确定，通过移动指针来滑动窗口，同时更新窗口内的状态。例如，在一个数组中找到满足特定条件的子数组，且该子数组的长度固定为某个值。</p></li><li><p>寻找最优解问题：滑动窗口在某些情况下可以用于寻找最优解。通过在滑动过程中根据问题要求更新窗口，可以找到满足最优条件的窗口。例如，求解最小覆盖子串、找到最长连续递增子数组等问题。</p></li></ol><p>滑动窗口的核心思想是通过调整窗口的起始位置和终止位置来滑动窗口，以有效地处理子串或子数组的问题。使用滑动窗口可以在时间复杂度为 O(n) 的情况下解决许多与连续子串/子数组相关的问题，提高算法的效率。</p><p>需要注意的是，滑动窗口并非适用于所有问题，因此在解决具体问题时，仍需结合实际情况进行分析和判断是否适合使用滑动窗口。</p><h2 id="具体题目示例" tabindex="-1"><a class="header-anchor" href="#具体题目示例" aria-hidden="true">#</a> 具体题目示例</h2><h3 id="找到字符串中所有字母异位词" tabindex="-1"><a class="header-anchor" href="#找到字符串中所有字母异位词" aria-hidden="true">#</a> 找到字符串中所有字母异位词</h3>',7),r={href:"https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> p <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	sLen<span class="token punctuation">,</span> pLen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token keyword">if</span> sLen <span class="token operator">&lt;</span> pLen <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ans
	<span class="token punctuation">}</span>
	sCount<span class="token punctuation">,</span> pCount <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> p <span class="token punctuation">{</span>
		pCount<span class="token punctuation">[</span>v<span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		sCount<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> sCount <span class="token operator">==</span> pCount <span class="token punctuation">{</span>
		ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//采用滑动窗口进行比较</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sLen<span class="token operator">-</span>pLen<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">//第一位退场</span>
		sCount<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span>
		<span class="token comment">//末位进场</span>
		sCount<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>pLen<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">if</span> pCount <span class="token operator">==</span> sCount <span class="token punctuation">{</span>
			ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ans
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="滑动窗口的平均值" tabindex="-1"><a class="header-anchor" href="#滑动窗口的平均值" aria-hidden="true">#</a> 滑动窗口的平均值</h3>`,2),d={href:"https://leetcode.cn/problems/qIsx9U/description/",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MovingAverage <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    size <span class="token builtin">int</span>
    sum <span class="token builtin">int</span>
    arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">/** Initialize your data structure here. */</span>
<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> MovingAverage <span class="token punctuation">{</span>
    <span class="token keyword">return</span> MovingAverage<span class="token punctuation">{</span>size<span class="token punctuation">:</span>size<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MovingAverage<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> this<span class="token punctuation">.</span>size <span class="token punctuation">{</span>
        <span class="token comment">//干掉首位的</span>
        this<span class="token punctuation">.</span>sum <span class="token operator">=</span> this<span class="token punctuation">.</span>sum <span class="token operator">-</span> this<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        this<span class="token punctuation">.</span>arr <span class="token operator">=</span> this<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    this<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
    this<span class="token punctuation">.</span>sum <span class="token operator">+=</span> val
    <span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float64</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function m(b,h){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("题目链接"),p(t)])]),k,n("p",null,[n("a",d,[s("题目链接"),p(t)]),s(" 其实核心还是在于如何避免去做一些重复计算的工作，用一个窗口去保存中间的值，这个才是滑动窗口的精髓")]),v])}const g=e(l,[["render",m],["__file","sliding_window.html.vue"]]);export{g as default};
